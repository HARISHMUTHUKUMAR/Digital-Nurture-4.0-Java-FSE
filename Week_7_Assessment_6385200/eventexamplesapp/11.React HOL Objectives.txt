Objectives



**1) Explain React Events.**



React events are actions that occur due to user interactions or system occurrences, like clicks, typing in inputs, form submissions, or mouse movements. 

Just like the browser's native DOM events, React captures these interactions so your app can respond with dynamic logic. 

Events in React are tied directly to elements in JSX (for example, <button onClick={handleClick}>Click</button>) and provide a predictable, consistent way to respond to user actions.





**2) Explain Event Handlers.**



Event handlers in React are functions you define to specify what should happen when a specific event occurs. 

You attach an event handler to a React element using a special prop like onClick, onChange, or onSubmit. 

When the event occurs, React calls your handler, passing a special event object as an argument so you can access event details or even prevent default browser behavior (like preventing a form from submitting). 

You usually define handlers as class methods or arrow functions:



jsx

const handleClick = () => { /\* logic here \*/ }

<button onClick={handleClick}>Click Me</button>



React encourages you to define these functions outside the returned JSX for clean, readable code.





**3) Define Synthetic Event.**



A Synthetic Event in React is a cross-browser wrapper that provides a consistent and normalized interface over the browser's native events. 

Native DOM events can behave differently across browsers—React wraps them with a SyntheticEvent, ensuring your code works the same everywhere. 

Synthetic events follow the W3C spec and expose useful properties and methods (like event.target, event.preventDefault(), etc.). 

React can also reuse event objects for efficiency, which is called event pooling, so the synthetic event is only reliably usable during the event handler's execution.





**4) Identify React Event Naming Convention.**



React follows a few clear naming conventions for events:



Event props use camelCase (e.g., onClick, onChange, onSubmit), unlike standard HTML, which uses lowercase (e.g., onclick).



Handler functions commonly use the handle prefix (e.g., handleClick, handleSubmit) so you can instantly tell it’s a function linked to an event.



When creating custom components that accept event handler props, the prop names typically start with on followed by a description of the event (e.g., onPlay, onClose), mirroring the DOM event pattern.



For clarity, you might see conventions like onClick={handleClick} in code, matching the event (onClick) with the handler name (handleClick) for readability and clarity.

