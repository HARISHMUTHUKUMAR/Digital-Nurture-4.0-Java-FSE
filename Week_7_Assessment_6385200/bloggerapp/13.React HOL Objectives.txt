Objectives



**1) Explain various ways of conditional rendering.**



Conditional rendering allows you to control what appears in your UI based on app state, props, or other logic. Here are several common approaches:



Ternary Operator:

Used directly in JSX for “if-else” style choices.



jsx

{isLoggedIn ? <LogoutButton /> : <LoginButton />}

Logical AND (\&\&):

Used for “if” conditions. If the condition is true, React shows the content.



jsx

{showAlert \&\& <Alert message="Be careful!" />}

Element Variables:

Assign JSX elements to variables based on logic, then render the variable.



jsx

let content;

if (isLoading) {

&nbsp; content = <Spinner />;

} else {

&nbsp; content = <DataTable />;

}

return <div>{content}</div>;



Switch Statement:

For multiple alternatives, use a switch and store the element in a variable.





**2) Explain how to render multiple components.**



To show several components at once, just place them side by side in your JSX—inside a parent element or fragment:



jsx

<>

&nbsp; <Header />

&nbsp; <Sidebar />

&nbsp; <MainContent />

&nbsp; <Footer />

</>



React Fragments (<> ... </>) let you group elements without adding extra DOM nodes.





**3) Define list component.**



A list component is a React component designed to display a collection of items, typically by mapping over an array and rendering a sub-component for each item:



jsx

function UserList({ users }) {

&nbsp; return (

&nbsp;   <ul>

&nbsp;     {users.map(user => (

&nbsp;       <UserListItem key={user.id} user={user} />

&nbsp;     ))}

&nbsp;   </ul>

&nbsp; );

}



Usually, the list data is passed as a prop, and you use .map() to create components for each element.





**4) Explain about keys in React applications.**



Keys are special string attributes you add to list elements to help React identify which items have changed, been added, or removed. 

They provide efficient re-rendering for lists:



Each child in an array or iterator should have a unique key prop.



Keys must be unique among siblings (but don’t need to be globally unique).



Don’t use indexes as keys if the list can change order or items can be added/removed.



Example:



jsx

{items.map(item => (

&nbsp; <li key={item.id}>{item.name}</li>

))}





**5) Explain how to extract components with keys.**



When mapping data to render a component, pass a key prop directly to the extracted/componentized child element. 

This is crucial for React’s diffing algorithm, ensuring each component instance keeps its state and behaves correctly.



Example:



jsx

function TodoList({ todos }) {

&nbsp; return (

&nbsp;   <ul>

&nbsp;     {todos.map(todo => (

&nbsp;       <TodoItem key={todo.id} todo={todo} />

&nbsp;     ))}

&nbsp;   </ul>

&nbsp; );

}



Never put the key inside the child component—always pass it at the point where you're creating the array of elements.





**6) Explain React Map, map() function.**



map() Function:

map() is a built-in JavaScript array method. In React, it’s most often used to transform arrays into lists of components.



jsx

const numbers = \[1, 2, 3];

const items = numbers.map(n => <li key={n}>{n}</li>);



React Map (Data Structure):

As a data structure (new Map()), it’s used for storing key-value pairs when you need fast lookups or to associate extra data with items, but is less common for rendering lists.



