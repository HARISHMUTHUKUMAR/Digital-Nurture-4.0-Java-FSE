Objectives



**1) Define JSX.**



JSX (JavaScript XML) is a syntax extension for JavaScript commonly used in React. 

It lets you write markup (which looks like HTML) directly inside your JavaScript code. 

JSX makes it easy to describe what the UI should look like in a way that feels natural for web developers. 

Under the hood, JSX is transformed into function calls (usually React.createElement) that build the actual UI.



Example:



jsx

const element = <h1>Hello, world!</h1>;





**2) Explain about ECMA Script.**



ECMAScript is the standardized scripting language specification that JavaScript follows. 

You can think of ECMAScript as the rulebook that defines how the JavaScript language should work. 

Different versions of ECMAScript (like ES5, ES6, etc.) add new features to the language. 

Modern JavaScript follows ECMAScript standards so that code behaves consistently across different browsers and environments.





**3) Explain React.createElement().**



React.createElement() is a React function that creates a React elementâ€”a special object that describes what should appear on the screen. 

Normally, you don't call it directly because JSX gets compiled into React.createElement calls.

But knowing about it helps understand what JSX is doing.



Example without JSX:



javascript

const element = React.createElement('h1', {className: 'greeting'}, 'Hello, world!');



This does the same thing as <h1 className="greeting">Hello, world!</h1> in JSX.





**4) Explain how to create React nodes with JSX.**



To create a React node (an element) with JSX, you write HTML-like tags in your JavaScript file:



jsx

const divNode = <div>Some content</div>;

const buttonNode = <button onClick={handleClick}>Click Me</button>;



Each JSX tag creates a React element object, which React uses to build the UI. 

These can be basic tags (like div, h1) or custom components.





**5) Define how to render JSX to DOM.**



To actually show a JSX element on the web page, you "render" it into the DOM (Document Object Model). 

In React apps, this is done with the ReactDOM.render function (in older versions) or createRoot with the new React 18+ API:



jsx

import ReactDOM from 'react-dom/client';



const element = <h1>Hello, React!</h1>;

const root = ReactDOM.createRoot(document.getElementById('root'));

root.render(element);



This takes your JSX, converts it to DOM nodes, and attaches it to the actual web page.





**6) Explain how to use JavaScript expressions in JSX.**



You can use any valid JavaScript expression inside JSX by wrapping it in curly braces {}.

Example:



jsx

const name = "Alice";

const element = <h1>Hello, {name}!</h1>; // Output: Hello, Alice!

You can call functions, do calculations, or include variables like this:



jsx

const isLoggedIn = true;

const message = <p>{isLoggedIn ? "Welcome back!" : "Please log in."}</p>;





**7) Explain how to use inline CSS in JSX.**



You can style elements in JSX directly using the style prop, which accepts a JavaScript object:



jsx

const styleObj = { color: 'blue', backgroundColor: 'yellow', padding: '10px' };

const element = <h2 style={styleObj}>Styled with Inline CSS!</h2>;

Notice that CSS properties are written in camelCase (e.g., backgroundColor instead of background-color), and values are strings. You can also pass the object directly:



jsx

<div style={{ marginTop: '20px', fontWeight: 'bold' }}>Custom style!</div>



